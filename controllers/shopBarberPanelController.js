const UserModel = require('../models/shopAdminSignup');
const ShopBranchesModel = require("../models/shopLocation");
const ShopCustomersModel = require("../models/shopCustomersSingup");
const ShopBarbersModel = require("../models/shopBarberSignup");
const sgMail = require('@sendgrid/mail');
sgMail.setApiKey(process.env.SENDGRID_API_KEY);
const bcrypt    = require('bcrypt');
const stripe    = require("stripe")(process.env.STRIPE_SECRET_KEY)
const jwt 	    = require('jsonwebtoken');
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const client = require('twilio')(accountSid, authToken);
const mongoose  = require('mongoose');
const moment = require('moment-timezone');

// Auto Genrate String Numbers Function
function makeid(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
      counter += 1;
    }
    return result;
}

function generateAccessToken(userObj) {
    const TOKEN_SECRET = process.env.TOKEN_SECRET
	return jwt.sign(userObj, TOKEN_SECRET, { expiresIn: '15d' });
}

// Signup for the Barber of shop
exports.signupBarberOfShop = async function (req, res) {
    try {
    if (!req.body.email || !req.body.mobile || !req.body.firstName || !req.body.lastName || !req.body.role) return res.status(400).send({success: false, message:"Invalid Request"});
    const barberEmailChecking = await ShopBarbersModel.findOne({
		email: req.body.email,
        shopAdminAccountId: req.user._id
	})
    if (barberEmailChecking) return res.status(400).send({success: false, message:"Email already exist"});

    const barberMobileChecking = await ShopBarbersModel.findOne({
		mobile: req.body.mobile,
        shopAdminAccountId: req.user._id
	})
    if (barberMobileChecking) return res.status(400).send({success: false, message:"Mobile already exist"});  

    // Checking Shop ID
    const adminuser = await UserModel.findOne({
        _id: req.user._id
	})
    if (!adminuser) return res.status(400).send({success: false, message:"Shop Not Found"});

    var shopBarbersModel = new ShopBarbersModel();
    shopBarbersModel.shopAdminAccountId =  req.user._id
    shopBarbersModel.email =  req.body.email
    shopBarbersModel.isMobileVerified =  false
    shopBarbersModel.isEmailVerified =  false
    shopBarbersModel.isPasswordChange =  false
    shopBarbersModel.mobile =  req.body.mobile
    shopBarbersModel.firstName =  req.body.firstName
    shopBarbersModel.lastName =  req.body.lastName
    shopBarbersModel.role =  req.body.role
    if(req.body.workingLocation){
        shopBarbersModel.workingLocation.push(req.body.workingLocation)
    }
    if(req.body.isOnCommission){
    shopBarbersModel.isOnCommission =  req.body.isOnCommission
    }
    if(req.body.isOnRent){
    shopBarbersModel.isOnRent =  req.body.isOnRent
    }
    if(req.body.commissionPayoutFrequency){
    shopBarbersModel.commissionPayoutFrequency =  req.body.commissionPayoutFrequency
    }
    if(req.body.rentCollectionFrequency){
    shopBarbersModel.rentCollectionFrequency =  req.body.rentCollectionFrequency
    }
    if(req.body.commisionPayStructure){
    shopBarbersModel.commisionPayStructure =  req.body.commisionPayStructure
    }
    if(req.body.rentPayStructure){
    shopBarbersModel.rentPayStructure =  req.body.rentPayStructure
    }
    // Auto Generate Password
    if(req.body.password){
        // Converting into Hash
        const hash = await bcrypt.hash(req.body.password, 10);
        shopBarbersModel.password   = hash
    }else{
        let autoGeneratedPassword = makeid(8);
        const hash = await bcrypt.hash(autoGeneratedPassword, 10);
        shopBarbersModel.password   = hash
    }
    
    // const customer = await stripe.customers.create({
    //     email:req.body.email.toLowerCase(),
    //     name: req.body.userName,

    // })
    // user.stripeCustomerId = customer.id

        await shopBarbersModel.save(async function (err, shopBarbersModel) {
            if (err) {
                if (err.name === 'MongoError' && err.code === 11000) {
                  // Duplicate username
                  return res.status(400).send({ succes: false, message: 'User already exist!' });
                }
          
                // Some other error
                return res.status(400).send({success: false, message: err});
              }
            //   Saving this user in admin main model so in every sense barber and admin will be connected with each other
              adminuser.businessAllBarbers.push(shopBarbersModel._id)
              adminuser.save();
             // Twillio Send Otp

            res.send({
                data: shopBarbersModel,
                success: true,
                message: "Signup Sucessfully & Code has been sent to the number!"
            });
        });        
    } catch (error) {
        console.log('errr', error)
        res.status(500).send({
            success: false, message:"Server Internal Error"
        });
    }

};