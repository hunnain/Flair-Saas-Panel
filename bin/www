#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('watchtrade-backend:server');
var server = app.listen(process.env.PORT || 5000);
var io = require('socket.io')(server,{
  cors: {
    origin: '*',
  }
});
// var http = require('http').Server(app);
// var io = require('socket.io')(http);
const MessagesModel = require('../models/messages');
const UserModel = require("../models/shopAdminSignup");
const Push = require("../helper/pushNotifications");




console.log("ITS RUNS MN")
io.on('connection',function(socket){

  // Channel Creating fucntion
  const makeChannel = (id_1,id_2)=>{
    let channelId;
    if(id_1 > id_2){
        channelId = id_1+id_2
        console.log( 'if ka console ' , channelId)
    }else{
        channelId = id_2+id_1
        console.log('else ka console ' , channelId)
    }
    return(
        channelId
    )
   }

    socket.on('join_room' , (data)=>{
      let channel_id =  makeChannel(data.reciever,data.sender)
      socket.join(channel_id)
     })

     socket.on('chatmessage', function(data){
      let channel_id =  makeChannel(data.reciever,data.sender)
        io.to(channel_id).emit('chatmessage' , data);
        let newMsg = new MessagesModel({
          sender:data.sender,
          reciever:data.reciever,
          channel:channel_id,
          text : data.msg,
          read:true
        })
        newMsg.save(async function (err, newMsg) {
          if(newMsg){

            let messageNData = await User.findOne({ _id: data.reciever })
            if(messageNData){
              // Send Notifiction
              var tokend = messageNData.notificationToken
              let push = new Push();
              push.sendPushNotification(tokend, `New Message Checkout!`, "New Messege", "chat", `${newMsg._id}`)
            }
          }
        })
    });
  });
  //console.log('user connected');
  // var nm;
  
  // socket.on('joined',function(user_data){
  //     nm = user_data.name;
  //     io.emit('joined_response',nm);
  //     console.log(user_data.name+" joined");        
  //     socket.join(user_data.name);
  //     users.push(user_data.name);
  //     console.log(users);
  //     for(var i=0;i<users.length;i++){
  //         io.to(users[i]).emit('refresh_users',users);
  //     }
  // });

  // socket.on('send_msg',function(user_signed_in,current_user,msg){
  //     io.to(user_signed_in).to(current_user).emit('sent_msg',user_signed_in,current_user,msg);
  // });

  // socket.on('typing_to_server',function(sender,typing_status){
  //     io.emit('typing_to_client',sender,typing_status);
  // });
  
  
  // socket.on('disconnect',function(){
  //     console.log(nm+' user disconnected');
  //     for(var i=0;i<users.length;i++){
  //         if(users[i] == nm){
  //             users.splice(i,1);
  //         }
  //     }
  //     for(var i=0;i<users.length;i++){
  //         io.to(users[i]).emit('refresh_users',users);
  //     }
  //     console.log("remaining users : "+users);
  //     io.emit('disconnect_response',nm);
  // });


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// http.listen(port);
// http.on('error', onError);
// http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening() {
//   var addr = http.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
